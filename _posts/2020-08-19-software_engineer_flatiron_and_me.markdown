---
layout: post
title:      "Software Engineer: Flatiron and Me"
date:       2020-08-20 00:56:57 +0000
permalink:  software_engineer_flatiron_and_me
---


    Going into this entire experience I knew it was going to be tough. Father of two working full-time at least 60 hours a week with a one hour drive to and from work each day 6 days a week, and I decided to take on the full-time course pace. When I told my cohort lead, Nancy, that in our first weekly one on one her mouth nearly hit the floor. She couldn't understand how I had had enough time to not only stay on pace, but at the time pull ahead of schedule. I came into this experience with probably more experience programming than most of my fellow cohort members. This is probably the only reason I was able to do what most people said I was crazy for even trying.
		First section was core ruby which although was fun did feel a little tedious as much of it was teaching concepts that I was already well versed in. Introduction to variables, function declaration, control structures and object oriented programming seemed the primary function of the first section with core ruby. The two major things that I did learn in this section that I didn't have any experience with prior to five months ago were the ruby language itself and the concept of gems. The closest thing I had ever encountered to this was importing classes from packages in Java, but it still seemed a little different, at least at the time. The more I have come to use Ruby the more I've come to realize that Java packages and Ruby gems are virtually identical.
		The next section was my first introduction to a major gem, Sinatra. This is where things finally stopped being tedious. I started learning about most of the common web application techniques including basic web communications and application routing. I'd have to say that my largest challenge with this section was actually ERB. I kept either forgetting to close if statements or I would forget the = on the opening section of an ERB tag when it was supposed to actually display to the page.
		The third section was a proper introduction to Ruby on Rails versus my previous self taught experience with Rails. I loved how it just continued to build on what we had already learned in Sinatra, but then showed how doing it in Rails was just so much more powerful. After this section was over I went back and looked at the couple of projects I had previously done in Rails and was scratching my head wondering why I had done it that way. Frankly I was a little embarassed of my previous work and immediately took them off of my GitHub. I still continued to have issues a little bit with ERB, but not nearly as much. This was also the first time I really actually got behind in my lessons because things in life were starting to take more attention, but I managed to pull through barely.
		Section four was a deeper look into an old friend, Javascript. I had done a number of things back in the day with Javascript, but I didn't go much farther then playing with some effects here and there based on event listeners. I had never worked with object oriented Javascript before this section. I took on one of my largest challenges with the project for this section. I built a page class that had a build method that took in a Javascript object and litterally built the entire page from that object. The object organization was a bit messy and hard to read initially, but it is kind of what I imagine a precursor for libraries like React would look like.
		With that last thought that brings me on to my last section I had, React. React was amazing, I absolutely loved it. My absolute favorite part of React was the concept of components. With components I could basically make an object class and plop it anywhere I wanted on the page or even drop multiple instances of it. That being said I did have difficulties even here, but if it wasn't for the challenge then where is the fun? What is there to overcome? The biggest problem I had was getting the Redux parts of my project to work properly. Mostly I could get the communication to the server to work, but the component wouldn't update properly because I miss coded something.
		All in all I had a massively enjoyable time with the Software Engineer course at Flatiron and I'm already recommending everyone that I meet that is interested in programming to look into it. I've met a lot of fun people, I've had plenty of challenge, and I've learned a lot along the way.
